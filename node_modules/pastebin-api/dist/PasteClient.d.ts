import type { CreateOptions, GetPastesOptions, ParsedPaste, DeletePasteOptions, ClientOptions, GetRawPasteOptions } from "./interfaces.js";
export default class PasteClient {
    private apiKey;
    private domain;
    private pasteBinUrl;
    private loginUrl;
    private rawUrl;
    constructor(options: string | ClientOptions);
    /**
     * set the API domain
     * @param {string} domain The domain of your reverse proxy server.
     */
    setDomain(domain?: string): void;
    /**
     * creates the paste
     * @param {Options} options The options for the paste
     * @returns {Promise<string>} The URL of the created paste
     * @see [https://pastebin.com/doc_api#2](https://pastebin.com/doc_api#2)
     */
    createPaste(options: CreateOptions): Promise<string>;
    /**
     * get a limit of 1000 pastes from the logged in user
     * @param {GetPastesOptions} options
     * @returns An array of all the user's pastes
     * @see [https://pastebin.com/doc_api#10](https://pastebin.com/doc_api#10)
     */
    getPastesByUser(options: GetPastesOptions): Promise<undefined | ParsedPaste[]>;
    /**
     * delete a paste by it's key
     * @param {DeletePasteOptions} options
     * @returns {boolean} Whether it was deleted or not
     * @see [https://pastebin.com/doc_api#11](https://pastebin.com/doc_api#11)
     */
    deletePasteByKey(options: DeletePasteOptions): Promise<boolean>;
    /**
     * return raw paste by it's key
     * @param {GetRawPasteOptions} options
     * @returns {string} The raw paste
     * @see [https://pastebin.com/doc_api#14](https://pastebin.com/doc_api#14)
     */
    getRawPasteByKey(options: GetRawPasteOptions): Promise<string>;
    /**
     * login to get access to more API routes
     * @param {string} name The user's name
     * @param {string} password The user's password
     * @returns The user token to use for other API routes
     * @see [https://pastebin.com/doc_api#9](https://pastebin.com/doc_api#9)
     */
    login(name: string, password: string): Promise<string>;
    /**
     * encodes data to valid URI
     * @param data The data you want to encode
     */
    private encode;
}
